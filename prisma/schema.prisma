generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  idx                Int                  @id @default(autoincrement())
  id                 String               @unique @default(uuid())
  email              String               @unique
  emailVerified      DateTime?
  phone              String               @unique
  password           String
  name               String
  nick               String               @unique
  level              Int                  @default(1)
  zipcode            String?
  addr1              String?
  addr2              String?
  role               UserRole             @default(USER)
  createdAt          DateTime             @default(now()) @map("created_at")
  updatedAt          DateTime             @default(now()) @updatedAt @map("updated_at")
  signUpVerified     DateTime?
  isUse              Boolean              @default(true) @map("is_use")
  isVisible          Boolean              @default(true) @map("is_visible")
  isSignout          Boolean              @default(false) @map("is_signout")
  accounts           Account[]
  profile            UserProfile[]
  sessions           Session[]
  companies          Company[]   
  setting            Setting?
  devices            ElectricDevice[]
  point              CarbonPoint[]
  selectedPartners   Partner[]            @relation("SelectedUser")
  partnerAsUser      Partner[]            @relation("PartnerUser")
  ElectricBill       ElectricBill[]
  ElectricStatistics ElectricStatistics[]
  KepcoStatistics    KepcoStatistics[]
  comments           TodosComment[]       @relation("UserToComments")

  posts              BBS[]
  bbsComments        BBSComment[]         @relation("UserToBBSComments")
  bbsLikes           BBSLike[]
  bbsCommentLike     BBSCommentLike[]

  reportsFiled       Report[] @relation("ReportReporter")   // 사용자가 제출한 신고 목록
  reportsAgainst Report[] @relation("ReportTargetAuthor")   // 신고당한(대상인

  fcmTokens          FcmToken[]
  fcmMessages        FcmMessage[]     @relation("FcmMessageToUser")
  fcmAlarms          FcmAlarm[]       @relation("FcmAlarmToUser")

  badges            UserBadge[]

  followersRelation     UserFollow[]    @relation("FollowerToUser")     // 나를 팔로우하는 사람들 관계
  followingRelation     UserFollow[]    @relation("FollowingToUser")    // 내가 팔로우하는 사람들 관계
  blockerRelation       UserBlock[]     @relation("BlockerToUser")      // 내가 차단한 사람들 관계
  blockedRelation       UserBlock[]     @relation("BlockedToUser")      // 나를 차단한 사람들 관계

  points              Point[] 


  @@map("ec_user")
}

model UserProfile {
  idx    Int    @id @default(autoincrement())
  uid    String @unique @default(uuid())
  userId String
  name   String
  url    String @db.VarChar(255)
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "userId_index")
  @@map("ec_user_profile")
}

model Company {
  idx       Int      @id @default(autoincrement())
  uid       String   @unique @default(uuid())
  cid       String   @default(cuid())
  userId    String   @map("user_id")
  name      String
  address   String?
  phone     String?
  email     String?
  custNo    String?  @map("cust_no")
  bizNo     String?  @map("biz_no")
  corpNo    String?  @map("corp_no")
  isUse     Boolean  @default(true) @map("is_use")
  isVisible Boolean  @default(true) @map("is_visible")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("ec_company")
}

model Partner {
  idx       Int      @id @default(autoincrement())
  uid       String   @unique @default(uuid())
  cid       String   @default(cuid())
  userId    String
  partnerId String
  isUse     Boolean  @default(true) @map("is_use")
  isVisible Boolean  @default(true) @map("is_visible")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  user      User?    @relation("SelectedUser", fields: [userId], references: [id], onDelete: Cascade)
  partner   User?    @relation("PartnerUser", fields: [partnerId], references: [id], onDelete: Cascade)

  @@unique([userId, partnerId])
  @@index([userId])
  @@index([partnerId])
  @@map("ec_partner")
}

model Account {
  idx                Int      @id @default(autoincrement())
  userId             String   @map("user_id")
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now()) @updatedAt @map("updated_at")
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("ec_user_account")
}

model Session {
  idx          Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("ec_user_session")
}

model Verification {
  idx        Int                 @id @default(autoincrement())
  identifier String
  code       String
  type       String
  purpose    VerificationPurpose
  createdAt  DateTime            @default(now())
  expiresAt  DateTime

  @@map("ec_user_verification")
}

model Setting {
  idx           Int     @id @default(autoincrement())
  uid           String  @unique @default(uuid())
  cid           String  @default(cuid())
  userId        String  @unique @map("user_id")
  gubun         String? @default("")
  kepcoContract String? @default("")
  kw            Int     @default(0)
  powerFactor   Int     @default(0)
  readingDate   Int     @default(0)
  efficiency    Float   @default(0)
  pushPoint     Boolean @default(true)
  pushBill      Boolean @default(true)
  isUse         Boolean @default(true) @map("is_use")
  isVisible     Boolean @default(true) @map("is_visible")
  skin          String  @default("basic")
  kepcoApi      Boolean @default(false)
  kepcoMonthApi Boolean @default(false)
  user          User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ec_settings")
}

model ElectricDevice {
  idx                Int                  @id @default(autoincrement())
  uid                String               @unique @default(uuid())
  cid                String               @default(cuid())
  userId             String               @map("user_id") @db.VarChar(100)
  name               String               @default("")
  companyIp          String               @map("company_ip") @db.VarChar(45)
  iotNum             String               @unique @map("iot_num") @db.VarChar(100)
  level              Int                  @default(1)
  manuDate           String               @default("")
  deviceType         String?              @default("") @db.VarChar(10)
  desc               String?              @db.Text
  createdAt          DateTime             @default(now()) @map("created_at")
  updatedAt          DateTime             @default(now()) @updatedAt @map("updated_at")
  isUse              Boolean              @default(true) @map("is_use")
  isVisible          Boolean              @default(true) @map("is_visible")
  isCron             Boolean              @default(true) @map("is_cron")
  user               User?                @relation(fields: [userId], references: [id], onDelete: Cascade)
  ElectricDeviceFile ElectricDeviceFile[]
  ElectricIotData    ElectricIotData[]

  @@index([userId])
  @@map("ec_electric_device")
}

model ElectricDeviceFile {
  idx            Int            @id @default(autoincrement())
  uid            String         @unique @default(uuid())
  deviceId       String
  name           String
  url            String         @db.VarChar(255)
  ElectricDevice ElectricDevice @relation(fields: [deviceId], references: [uid], onDelete: Cascade)

  @@index([deviceId], map: "deviceId_index")
  @@map("ec_electric_device_files")
}

model GreenCard {
  idx         Int      @id @default(autoincrement())
  uid         String   @unique @default(uuid())
  cid         String   @default(cuid())
  userId      String   @map("user_id")
  customerUid String?  @default("") @map("customer_uid")
  billingKey  String?  @default("") @map("billing_key")
  name        String?  @default("")
  cardName    String?  @default("") @map("card_name")
  cardNumber1 String?  @default("") @map("card_number1")
  cardNumber2 String?  @default("") @map("card_number2")
  cardNumber3 String?  @default("") @map("card_number3")
  cardNumber4 String?  @default("") @map("card_number4")
  cardMm      String?  @default("") @map("card_mm")
  cardYy      String?  @default("") @map("card_yy")
  cardPwd     String?  @default("") @map("card_pwd")
  cardCvc     String?  @default("") @map("card_cvc")
  juminOrCorp String?  @default("") @map("juminOrCorp")
  represent   Boolean  @default(true) @map("represent")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  isUse       Boolean  @default(true) @map("use")
  isVisible   Boolean  @default(true) @map("visible")

  @@map("ec_green_card")
}

model CarbonPoint {
  idx         Int       @id @default(autoincrement())
  uid         String    @unique @default(uuid())
  cid         String    @default(cuid())
  userId      String    @map("user_id")
  point       Int?      @default(0)
  usePoint    Int?      @default(0) @map("use_point")
  mbPoint     Int?      @default(0) @map("mb_point")
  status      String?   @default("") @map("status")
  expired     Int?      @default(0) @map("expired")
  expiredDate DateTime? @map("expired_date")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at")
  isVisible   Boolean   @default(true) @map("visible")
  isUse       Boolean   @default(true) @map("use")
  user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("ec_carbon_point")
}

model Todos {
  idx          Int            @id @default(autoincrement())
  uid          String         @unique @default(uuid())
  cid          String         @default(cuid())
  name         String         @db.VarChar(255)
  email        String         @db.VarChar(255)
  gender       String?        @db.VarChar(255)
  img1         String?        @db.VarChar(255)
  ipAddress    String?        @map("ip_address") @db.VarChar(255)
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @default(now()) @updatedAt @map("updated_at")
  isUse        Boolean        @default(true) @map("is_use")
  isVisible    Boolean        @default(true) @map("is_visible")
  content      String?        @db.LongText
  content2     String?        @db.LongText
  password     String?        @db.VarChar(255)
  sortOrder    Int            @default(0) @map("sort_order")
  TodosComment TodosComment[]
  TodosFile    TodosFile[]
  TodosOption  TodosOption[]

  @@index([uid], map: "uid_index")
  @@index([cid], map: "cid_index")
  @@map("ec_todos")
}

model TodosComment {
  idx        Int                @id @default(autoincrement())
  uid        String             @unique @default(uuid())
  todoId     String
  author     String
  content    String             @db.Text
  content2   String             @db.Text
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @default(now()) @updatedAt @map("updated_at")
  parentIdx  Int?
  likeCount  Int                @default(0)
  replyCount Int                @default(0)
  user       User               @relation("UserToComments", fields: [author], references: [id])
  Todos      Todos              @relation(fields: [todoId], references: [uid], onDelete: Cascade)
  likes      TodosCommentLike[]

  @@index([todoId], map: "todoId_index")
  @@index([todoId, parentIdx, createdAt])
  @@index([todoId, parentIdx, likeCount, createdAt])
  @@index([todoId, parentIdx, replyCount, createdAt])
  @@index([author], map: "author_index")
  @@map("ec_todosComments")
}

model TodosCommentLike {
  idx          Int          @id @default(autoincrement())
  commentId    Int
  userId       String
  createdAt    DateTime     @default(now())
  TodosComment TodosComment @relation(fields: [commentId], references: [idx])

  @@unique([commentId, userId])
  @@index([commentId])
  @@map("ec_todosCommentLikes")
}

model TodosFile {
  idx          Int      @id @default(autoincrement())
  uid          String   @unique @default(uuid())
  todoId       String
  name         String
  url          String   @db.VarChar(255)
  ext          String   @db.VarChar(10)
  originalName String
  size         Int
  type         String   @db.VarChar(50)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  Todos        Todos    @relation(fields: [todoId], references: [uid], onDelete: Cascade)

  @@index([todoId], map: "todoId_index")
  @@map("ec_todosFiles")
}

model TodosOption {
  idx    Int    @id @default(autoincrement())
  uid    String @unique @default(uuid())
  name   String
  age    Int
  gender String
  todoId String
  Todos  Todos  @relation(fields: [todoId], references: [uid], onDelete: Cascade)

  @@index([todoId], map: "todoId_index")
  @@map("ec_todosOptions")
}

model Popup {
  idx       Int      @id @default(autoincrement())
  uid       String   @unique @default(uuid())
  cid       String   @default(cuid())
  title     String   @default("")
  content   String?  @db.LongText
  posX      Int      @default(0) @map("posX")
  posY      Int      @default(0) @map("posY")
  startTime DateTime @default(now())
  endTime   DateTime @default(now())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  isUse     Boolean  @default(true) @map("is_use")
  isVisible Boolean  @default(true) @map("is_visible")

  @@map("ec_popup")
}

model Banner {
  idx       Int      @id @default(autoincrement())
  uid       String   @unique @default(uuid())
  cid       String   @default(cuid())
  gubun     String   @default("") @map("gubun")
  title     String   @default("") @map("title")
  url       String   @default("") @map("url")
  deviceType   String   @default("all") //  all | pc | mobile
  sortOrder    Int            @default(0) @map("sort_order")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  isUse     Boolean  @default(true) @map("is_use")
  isVisible Boolean  @default(true) @map("is_visible")

  BannerFile BannerFile[]

  @@map("ec_banner")
}

model BannerFile  {
  idx          Int      @id @default(autoincrement())
  uid          String   @unique @default(uuid())
  bannerId     String
  name         String
  url          String   @db.VarChar(255)
  ext          String   @db.VarChar(10)
  originalName String
  size         Int
  type         String   @db.VarChar(50)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  Banner       Banner   @relation(fields: [bannerId], references: [uid], onDelete: Cascade)

  @@index([bannerId], map: "bannerId_index")
  @@map("ec_banner_files")
}

model Config {
  idx         Int     @id @default(autoincrement())
  uid         String  @unique @default(uuid())
  cid         String  @default(cuid())
  CNFname     String  @db.VarChar(255)
  CNFvalue    String? @db.LongText
  CNFvalue_en String? @db.LongText
  CNFvalue_ja String? @db.LongText
  CNFvalue_zh String? @db.LongText
  sortOrder    Int            @default(0) @map("sort_order")

  @@map("ec_config")
}

model AgentLog {
  idx            Int      @id @default(autoincrement())
  uid            String   @unique @default(uuid())
  cid            String   @default(cuid())
  browser        String
  browserVersion String
  os             String
  osVersion      String
  device         String
  ip             String
  referer        String
  host           String
  isMobile       Boolean
  isTablet       Boolean
  isDesktop      Boolean
  isRobot        Boolean
  keyword        String
  createdAt      DateTime @default(now()) @map("created_at")

  @@map("ec_agent_log")
}

model Management {
  idx       Int      @id @default(autoincrement())
  uid       String   @unique @default(uuid())
  cid       String   @default(cuid())
  gubun     String   @db.VarChar(255)
  key       String   @db.VarChar(255)
  value     String   @db.VarChar(255)
  value_en  String?  @db.VarChar(255)
  value_ja  String?  @db.VarChar(255)
  value_zh  String?  @db.VarChar(255)
  sortOrder    Int            @default(0) @map("sort_order")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  isUse     Boolean  @default(true) @map("is_use")
  isVisible Boolean  @default(true) @map("is_visible")

  @@map("ec_management")
}


model Category {
  idx       Int      @id @default(autoincrement())
  uid       String   @unique @default(uuid())
  cid       String   @default(cuid())
  code      String   @db.VarChar(255)
  name      String   @db.VarChar(255)
  desc      String   @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  isUse     Boolean  @default(true) @map("is_use")
  isVisible Boolean  @default(true) @map("is_visible")

  @@map("ec_category")
}


model ElectricBill {
  idx                Int       @id @default(autoincrement())
  uid                String    @unique @default(uuid())
  cid                String    @default(cuid())
  userId             String    @map("user_id")
  bill               Int       @default(0)
  kwh                Int       @default(0)
  ym                 String    @map("ym") @db.VarChar(10)
  startDate          DateTime? @map("sdate")
  endDate            DateTime? @map("edate")
  appliedPower       Int       @default(0) @map("bill_aply_pwr")
  baseBill           Decimal   @default(0.00) @map("base_bill") @db.Decimal(17, 2)
  kwhBill            Decimal   @default(0.00) @map("kwh_bill") @db.Decimal(17, 2)
  discountBill       Int       @default(0) @map("dc_bill")
  totalBill          Int       @default(0) @map("req_bill")
  requestedAmount    Int       @default(0) @map("req_amt")
  lowLoadUsage       Int       @default(0) @map("lload_usekwh")
  midLoadUsage       Int       @default(0) @map("mload_usekwh")
  maxLoadUsage       Int       @default(0) @map("maxload_usekwh")
  lowLoadReading     Int       @default(0) @map("lload_needle")
  midLoadReading     Int       @default(0) @map("mload_needle")
  maxLoadReading     Int       @default(0) @map("maxload_needle")
  leadingPowerFactor Decimal   @default(0.000) @map("jn_pwrfact") @db.Decimal(17, 3)
  laggingPowerFactor Decimal   @default(0.000) @map("ji_pwrfact") @db.Decimal(17, 3)
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @default(now()) @updatedAt @map("updated_at")
  isUse              Boolean   @default(true) @map("is_use")
  isVisible          Boolean   @default(true) @map("is_visible")
  user               User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("ec_electric_bill")
}

model ElectricIotData {
  idx               Int            @id @default(autoincrement())
  dataDate          DateTime       @map("data_date")
  dataTime          DateTime       @map("data_time")
  companyIp         String         @map("company_ip") @db.VarChar(45)
  iotNum            String         @map("iot_num") @db.VarChar(100)
  l1Volt            Float?         @default(0) @map("l1_volt") @db.Float
  l2Volt            Float?         @default(0) @map("l2_volt") @db.Float
  l3Volt            Float?         @default(0) @map("l3_volt") @db.Float
  l1Current         Float?         @default(0) @map("l1_current") @db.Float
  l2Current         Float?         @default(0) @map("l2_current") @db.Float
  l3Current         Float?         @default(0) @map("l3_current") @db.Float
  l1ActivePower     Float?         @default(0) @map("l1_active_power") @db.Float
  l2ActivePower     Float?         @default(0) @map("l2_active_power") @db.Float
  l3ActivePower     Float?         @default(0) @map("l3_active_power") @db.Float
  l1ReactivePower   Float?         @default(0) @map("l1_reactive_power") @db.Float
  l2ReactivePower   Float?         @default(0) @map("l2_reactive_power") @db.Float
  l3ReactivePower   Float?         @default(0) @map("l3_reactive_power") @db.Float
  l1ApparentPower   Float?         @default(0) @map("l1_apparent_power") @db.Float
  l2ApparentPower   Float?         @default(0) @map("l2_apparent_power") @db.Float
  l3ApparentPower   Float?         @default(0) @map("l3_apparent_power") @db.Float
  l1PowerFactor     Float?         @default(0) @map("l1_power_factor") @db.Float
  l2PowerFactor     Float?         @default(0) @map("l2_power_factor") @db.Float
  l3PowerFactor     Float?         @default(0) @map("l3_power_factor") @db.Float
  l1PhaseAngle      Float?         @default(0) @map("l1_phase_angle") @db.Float
  l2PhaseAngle      Float?         @default(0) @map("l2_phase_angle") @db.Float
  l3PhaseAngle      Float?         @default(0) @map("l3_phase_angle") @db.Float
  l1L2Volt          Float?         @default(0) @map("l1_l2_volt") @db.Float
  l2L3Volt          Float?         @default(0) @map("l2_l3_volt") @db.Float
  l3L1Volt          Float?         @default(0) @map("l3_l1_volt") @db.Float
  supplyVoltFreq    Float?         @default(0) @map("supply_volt_freq") @db.Float
  totActivePower    Float?         @default(0) @map("tot_active_power") @db.Float
  totReactivePower  Float?         @default(0) @map("tot_reactive_power") @db.Float
  totApparentPower  Float?         @default(0) @map("tot_apparent_power") @db.Float
  totPowerFactor    Float?         @default(0) @map("tot_power_factor") @db.Float
  totPhaseAngle     Float?         @default(0) @map("tot_phase_angle") @db.Float
  sumCurrent        Float?         @default(0) @map("sum_current") @db.Float
  avgNeutralVolt    Float?         @default(0) @map("avg_neutral_volt") @db.Float
  avgVolt           Float?         @default(0) @map("avg_volt") @db.Float
  avgCurrent        Float?         @default(0) @map("avg_current") @db.Float
  neutralCurrent    Float?         @default(0) @map("neutral_current") @db.Float
  totImportActive   Float?         @default(0) @map("tot_import_active") @db.Float
  totExportActive   Float?         @default(0) @map("tot_export_active") @db.Float
  totActive         Float?         @default(0) @map("tot_active") @db.Float
  totImportReactive Float?         @default(0) @map("tot_import_reactive") @db.Float
  totExportReactive Float?         @default(0) @map("tot_export_reactive") @db.Float
  totReactive       Float?         @default(0) @map("tot_reactive") @db.Float
  createdAt         DateTime       @default(now()) @map("regdate")
  isUse             String         @default("y") @map("use") @db.VarChar(1)
  isVisible         String         @default("y") @map("visible") @db.VarChar(1)
  ElectricDevice    ElectricDevice @relation(fields: [iotNum], references: [iotNum], onDelete: Cascade)

  @@index([dataDate], map: "data_date")
  @@index([dataTime], map: "data_time")
  @@index([iotNum], map: "iot_num")
  @@index([iotNum, dataDate, dataTime], map: "idx_iot_datetime")
  @@map("ec_electric_iot_data")
}

model ElectricStatistics {
  idx      Int       @id @default(autoincrement())
  userId   String    @map("user_id") @db.VarChar(255)
  iotNum   String    @map("iot_num") @db.VarChar(255)
  minDate  DateTime? @map("min_date")
  maxDate  DateTime? @map("max_date")
  dispDate DateTime? @map("disp_date")
  power    Decimal   @default(0.00) @db.Decimal(13, 2)
  manual   String?   @default("auto") @db.VarChar(45)
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, iotNum, dispDate], map: "idx_user_iotnum_dispdate")
  @@index([dispDate], map: "idx_dispdate")
  @@map("ec_electric_statistics")
}

model KepcoStatistics {
  idx        Int       @id @default(autoincrement())
  userId     String    @map("user_id") @db.VarChar(255)
  dispDate   DateTime? @map("disp_date")
  kepcoPower Decimal   @default(0.00) @map("kepco_power") @db.Decimal(13, 2)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, dispDate], map: "idx_kepco_user_dispdate")
  @@index([dispDate], map: "idx_kepco_dispdate")
  @@map("ec_kepco_statistics")
}


model Board {
  idx          Int            @id @default(autoincrement())
  uid          String         @unique @default(uuid())
  cid          String         @default(cuid())
  bdTable           String    @unique @map("bd_table") @db.VarChar(20)
  bdName            String    @default("") @map("bd_name") @db.VarChar(255)
  bdNameEn          String    @default("") @map("bd_name_en") @db.VarChar(255)
  bdNameJa          String    @default("") @map("bd_name_ja") @db.VarChar(255)
  bdNameZh          String    @default("") @map("bd_name_zh") @db.VarChar(255)
  bdSkin            String    @default("") @map("bd_skin") @db.VarChar(255)
  bdListSize        Int       @default(0) @map("bd_list_size") @db.TinyInt
  bdFileCount       Int       @default(0) @map("bd_file_count") @db.TinyInt
  bdNewTime         Int       @default(0) @map("bd_new_time") @db.TinyInt
  bdSecret          Boolean   @default(false) @map("bd_secret")
  bdPrivate         Boolean   @default(false) @map("bd_private")
  bdBusiness        Boolean   @default(false) @map("bd_business")
  bdUseCategory     Boolean   @default(false) @map("bd_use_category")
  bdCategoryList    String?   @map("bd_category_list") @db.Text
  bdFixTitle        String    @default("") @map("bd_fix_title") @db.VarChar(255)
  bdListLevel       Int       @default(0) @map("bd_list_level") @db.TinyInt
  bdReadLevel       Int       @default(0) @map("bd_read_level") @db.TinyInt
  bdWriteLevel      Int       @default(0) @map("bd_write_level") @db.TinyInt
  bdReplyLevel      Int       @default(0) @map("bd_reply_level") @db.TinyInt
  bdCommentLevel    Int       @default(0) @map("bd_comment_level") @db.TinyInt
  bdUploadLevel     Int       @default(0) @map("bd_upload_level") @db.TinyInt
  bdDownloadLevel   Int       @default(0) @map("bd_download_level") @db.TinyInt
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @default(now()) @updatedAt @map("updated_at")
  isUse        Boolean        @default(true) @map("is_use")
  isVisible    Boolean        @default(true) @map("is_visible")
  sortOrder    Int            @default(0) @map("sort_order")

  
  posts             BBS[]
  comments          BBSComment[]
  files             BBSFile[]

  @@index([uid], map: "uid_index")
  @@index([cid], map: "cid_index")
  @@map("ec_board")
}


model BBS {
  idx          Int            @id @default(autoincrement())
  uid          String         @unique @default(uuid())
  cid          String         @default(cuid())
  bdTable      String         @default("") @map("bd_table") @db.VarChar(20)
  userId       String?        @map("user_id") @db.VarChar(255)
  name         String         @db.VarChar(255)
  password     String         @db.VarChar(255)
  notice       Boolean        @default(false) @map("notice")
  secret       Boolean        @default(false) @map("secret")
  category     String         @default("") @db.VarChar(255)
  subject      String         @default("") @db.VarChar(255)
  content      String?        @db.LongText
  contentA     String?        @map("content_a") @db.LongText
  ipAddress    String?        @map("ip_address") @db.VarChar(255)
  hit          Int            @default(0)
  good         Int            @default(0)
  bad          Int            @default(0)
  comment      Int            @default(0)
  thread       String         @default("") @db.VarChar(10)
  commentCnt   Int            @default(0) @map("comment_cnt")
  threadCnt    Int            @default(0) @map("thread_cnt")
  link1        String         @default("") @map("link_1") @db.VarChar(255)
  link2        String         @default("") @map("link_2") @db.VarChar(255)
  
  sortOrder    Int            @default(0) @map("sort_order")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @default(now()) @updatedAt @map("updated_at")
  isUse        Boolean        @default(true) @map("is_use")
  isVisible    Boolean        @default(true) @map("is_visible")

  // 관계 설정
  board      Board       @relation(fields: [bdTable], references: [bdTable], onDelete: Cascade)
  user       User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments   BBSComment[]
  files      BBSFile[]
  likes      BBSLike[]   @relation("BBSToLikes")

  @@index([uid], map: "uid_index")
  @@index([cid], map: "cid_index")
  @@index([userId], map: "userId_index")
  @@index([bdTable], map: "bdTable_index")
  @@map("ec_bbs")
}

model BBSLike {
  idx          Int          @id @default(autoincrement())
  bdTable      String       @default("") @map("bd_table") @db.VarChar(20)
  parentIdx    Int
  userId       String
  createdAt    DateTime     @default(now())
  
  user         User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  bbs          BBS?         @relation("BBSToLikes", fields: [parentIdx], references: [idx], onDelete: Cascade,  onUpdate: NoAction)

  @@unique([parentIdx, userId])
  @@index([parentIdx], map: "parentIdx_index")
  @@index([userId], map: "userId_index")
  @@map("ec_bbs_like")
}



model BBSComment {
  idx        Int                @id @default(autoincrement())
  uid        String             @unique @default(uuid())
  bdTable    String             @default("") @map("bd_table") @db.VarChar(20)
  pid        String
  author     String?            @db.VarChar(255)
  password   String?            @db.VarChar(255)
  content    String             @db.Text
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @default(now()) @updatedAt @map("updated_at")
  isUse      Boolean            @default(true) @map("is_use")
  isVisible  Boolean            @default(true) @map("is_visible")
  parentIdx  Int?
  likeCount  Int                @default(0)
  replyCount Int                @default(0)
  isUser     Boolean            @default(true)

  board      Board     @relation(fields: [bdTable], references: [bdTable], onDelete: Cascade)
  bbs        BBS       @relation(fields: [pid], references: [uid], onDelete: Cascade)
  user       User?     @relation("UserToBBSComments", fields: [author], references: [id], onDelete: Cascade) 
  parent     BBSComment?  @relation("CommentToReply", fields: [parentIdx], references: [idx], onDelete: NoAction, onUpdate: NoAction)
  replies    BBSComment[] @relation("CommentToReply")
  likes      BBSCommentLike[] @relation("CommentToLikes")

  @@index([pid], map: "bbsId_index")
  @@index([bdTable], map: "bdTable_index")
  @@index([parentIdx], map: "parentIdx_index")
  @@index([author], map: "author_index")
  @@map("ec_bbs_comment")
}


model BBSCommentLike {
  idx          Int          @id @default(autoincrement())
  bdTable      String       @default("") @map("bd_table") @db.VarChar(20)
  parentIdx    Int
  userId       String
  createdAt    DateTime     @default(now())
  
  user         User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment      BBSComment?  @relation("CommentToLikes", fields: [parentIdx], references: [idx], onDelete: Cascade, onUpdate: NoAction)


  @@unique([parentIdx, userId])
  @@index([parentIdx], map: "parentIdx_index")
  @@index([userId], map: "userId_index")
  @@map("ec_bbs_comment_like")
}

model BBSFile {
  idx          Int      @id @default(autoincrement())
  uid          String   @unique @default(uuid())
  bdTable      String   @default("") @map("bd_table") @db.VarChar(20)
  pid          String
  name         String
  url          String   @db.VarChar(255)
  ext          String   @db.VarChar(10)
  originalName String
  size         Int
  type         String   @db.VarChar(50)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  board        Board    @relation(fields: [bdTable], references: [bdTable], onDelete: Cascade)
  bbs          BBS      @relation(fields: [pid], references: [uid], onDelete: Cascade)

  @@index([pid], map: "pid_index")
  @@index([bdTable], map: "bdTable_index")
  @@map("ec_bbs_file")
}

model Report {
  idx          Int             @id @default(autoincrement())             
  uid          String          @unique @default(uuid())                 
  reporterId   Int?                                                    // 신고자(User.idx) (익명 신고이면 null)
  reporter     User?           @relation("ReportReporter", fields: [reporterId], references: [idx]) // 신고자(User)
  targetAuthorId Int?            // 신고 대상 리소스의 작성자(User.idx) — 누가 신고당했는지 추적
  targetAuthor   User?           @relation("ReportTargetAuthor", fields: [targetAuthorId], references: [idx]) // 신고 대상 작성자(User)
  targetType   ReportTargetType                                   // 신고 대상 타입 (예: BBS, BBS_COMMENT)
  targetId     Int             // 신고 대상 PK (예: BBS.idx 또는 BBSComment.idx)
  reason       ReportReason    // 신고 사유 코드
  description  String?         // 상세 설명
  comment      String?         // 운영자 메모 / 처리 코멘트 (관리용)
  status       ReportStatus    @default(OPEN)                      // OPEN / REVIEWING / RESOLVED / DISMISSED
  createdAt    DateTime        @default(now())                     // 생성일시
  updatedAt    DateTime        @updatedAt                          // 최종 수정일시 (자동)
  resolvedAt   DateTime?       // 처리 완료일시 (처리되면 설정)

  @@index([targetType, targetId])
  @@index([targetAuthorId])
  @@index([reporterId])
  @@index([status])
  @@map("ec_report")
}

model FcmToken {
  idx        Int         @id @default(autoincrement())
  uid        String      @unique @default(uuid())
  userId     String      @map("user_id")
  token      String      @unique @db.VarChar(512)
  platform   FcmPlatform @default(android)
  deviceId   String?     @map("device_id") @db.VarChar(128)
  appVersion String?     @map("app_version") @db.VarChar(32)
  deviceInfo String?     @map("device_info") @db.Text
  badgeCount Int         @default(0) @map("badge_count")
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @default(now()) @updatedAt @map("updated_at")
  isUse      Boolean     @default(true) @map("is_use")
  isVisible  Boolean     @default(true) @map("is_visible")
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("ec_fcm_tokens")
}

model FcmTemplate {
  idx           Int      @id @default(autoincrement())
  uid           String   @unique @default(uuid())
  type          String   @db.VarChar(50) // 템플릿 코드 (예: qa_input, review 등)
  activity      String   @db.VarChar(45)
  title         String?  @db.VarChar(255) // FCM 제목 템플릿
  body          String?  @db.Text // FCM 본문 템플릿
  message       String?  @db.Text
  titleEn       String?  @map("title_en") @db.VarChar(255)
  bodyEn        String?  @map("body_en") @db.Text
  messageEn     String?  @map("message_en") @db.Text
  targetLink    String   @default("") @map("target_link") @db.VarChar(500)
  webTargetLink String   @default("") @map("web_target_link") @db.VarChar(500)
  img1          String   @default("") @map("img1") @db.VarChar(255)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at")
  isUse         Boolean  @default(true) @map("is_use")
  isVisible     Boolean  @default(true) @map("is_visible")

  fcmMessages   FcmMessage[]
  fcmAlarms     FcmAlarm[]

  @@map("ec_fcm_templates")
}


model FcmMessage {
  idx        Int         @id @default(autoincrement())
  uid        String      @unique @default(uuid())
  platform   String      @default("app") @db.VarChar(255) // app, desktop, mobile
  templateId Int?        @map("template") // FcmTemplate 참조
  userId     String      @map("user_id") 
  fcmToken   String?     @map("fcm_token") @db.VarChar(255)
  otCode     String?     @map("ot_code") @db.VarChar(255) // 주문코드
  title      String?     @db.VarChar(255)
  body       String?     @db.VarChar(255)
  url        String?     @db.VarChar(500)
  res        String?     @db.LongText // 전송결과 전체
  resStatus  String?     @map("res_status") @db.VarChar(45)
  resMsg     String?     @map("res_msg") @db.VarChar(255)
  sortOrder  Int         @default(0) @map("rt_order")
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @default(now()) @updatedAt @map("updated_at")
  template   FcmTemplate? @relation(fields: [templateId], references: [idx])
  user       User?       @relation("FcmMessageToUser", fields: [userId], references: [id], onDelete: Cascade)

  @@index([body], map: "mt_id")
  @@index([userId])
  @@index([templateId])
  @@map("ec_fcm")
}

model FcmAlarm {
  idx        Int         @id @default(autoincrement())
  uid        String      @unique @default(uuid())
  userId     String      @map("user_id")
  templateId Int?        @map("template") // FcmTemplate.idx 참조
  message    String      @db.Text // 화면에 표시될 알림 메시지
  url        String?     @db.VarChar(500) // 클릭 시 이동할 URL
  isRead     Boolean     @default(false) @map("is_read") // Y/N -> Boolean으로 변환
  createdAt  DateTime    @default(now()) @map("created_at")
  user       User        @relation("FcmAlarmToUser", fields: [userId], references: [id], onDelete: Cascade)
  template   FcmTemplate? @relation(fields: [templateId], references: [idx])

  @@index([userId])
  @@index([templateId])
  @@map("ec_fcm_alarm")
}


// 뱃지 마스터 정의 테이블
model BadgeMaster {
  idx          Int         @id @default(autoincrement())
  uid          String      @unique @default(uuid())
  bmType       String?     @map("bm_type") @db.VarChar(20) // 뱃지 유형 (예: review, item, variety, country 등)
  bmCategory   String?     @map("bm_category") @db.VarChar(100) // 뱃지 카테고리
  bmLevel      String?     @map("bm_level") @db.VarChar(20) // 단계명 (예: Rookie, King)
  bmThreshold  Int?        @map("bm_threshold") // 획득 조건 (리뷰 수 등)
  bmName       String?     @map("bm_name") @db.VarChar(100) // 뱃지 이름
  img1         String?     @db.VarChar(255) // 뱃지 아이콘
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @default(now()) @updatedAt @map("updated_at")
  isUse        Boolean     @default(true) @map("is_use")
  isVisible    Boolean     @default(true) @map("is_visible")
  
  // 회원 뱃지와의 관계
  memberBadges UserBadge[]

  @@map("ec_badge_master")
}

// 회원이 획득한 뱃지 정보 테이블 
model UserBadge {
  idx          Int         @id @default(autoincrement())
  userId       String      @map("user_id")
  badgeId      Int         @map("badge_id")
  createdAt    DateTime    @default(now()) @map("created_at")
  
  // 관계 설정
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge        BadgeMaster @relation(fields: [badgeId], references: [idx], onDelete: Cascade)

  @@index([userId])
  @@index([badgeId])
  @@map("ec_user_badge")
}


// 회원 팔로잉/팔로워 관계 테이블
model UserFollow {
  idx          Int           @id @default(autoincrement())
  followerIdx  Int           @map("follower_idx") // 팔로우 요청한 회원 idx
  followingIdx Int           @map("following_idx") // 팔로우 대상 회원 idx
  followDate   DateTime      @default(now()) @map("follow_date") // 팔로우 요청일시
  status       FollowStatus  @default(WAITING) @map("status") // 승인상태
  confirmDate  DateTime?     @map("confirm_date") // 승인 또는 거절 처리일시
  
  // 관계 설정
  follower     User          @relation("FollowerToUser", fields: [followerIdx], references: [idx], onDelete: Cascade)
  following    User          @relation("FollowingToUser", fields: [followingIdx], references: [idx], onDelete: Cascade)

  @@unique([followerIdx, followingIdx], name: "unique_follow")
  @@index([followerIdx])
  @@index([followingIdx])
  @@index([status])
  @@map("ec_user_follow")
}

// 회원 차단 테이블
model UserBlock {
  idx         Int      @id @default(autoincrement())
  blockerIdx  Int      @map("blocker_idx") // 차단한 회원 idx
  blockedIdx  Int      @map("blocked_idx") // 차단 대상 회원 idx
  blockDate   DateTime @default(now()) @map("block_date") // 차단일시
  
  // 관계 설정
  blocker     User     @relation("BlockerToUser", fields: [blockerIdx], references: [idx], onDelete: Cascade)
  blocked     User     @relation("BlockedToUser", fields: [blockedIdx], references: [idx], onDelete: Cascade)

  @@unique([blockerIdx, blockedIdx])
  @@index([blockerIdx])
  @@index([blockedIdx])
  @@map("ec_user_block")
}


// 회원 포인트(캐시) 내역 저장 테이블
model Point {
  idx         Int       @id @default(autoincrement())
  userId      String    @map("user_id") // 사용자 ID (User.id 참조)
  point       Int       @default(0) // 충전된 포인트
  usePoint    Int       @default(0) @map("use_point") // 사용된 포인트
  createdAt   DateTime  @default(now()) @map("created_at") // 등록일 (포인트 적립/사용 날짜)
  status      String    @default("") @db.VarChar(45) // 포인트 상태 (add: 적립, remove: 사용, remove_expired: 기간 만료 차감)
  expired     Boolean   @default(false) // 만료 여부 (false: 유효, true: 만료됨)
  expiredAt   DateTime? @map("expired_at") // 포인트 만료일
  otGubun     String    @default("") @map("ot_gubun") @db.VarChar(45) // ot_code 구분 : cash, service
  otCode      String    @default("") @map("ot_code") @db.VarChar(255) // add:캐시구매코드, remove:서비스구매코드(차감처리)
  message     String    @default("") @db.VarChar(255) // 기타 메시지
  
  // 관계 설정
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "idx_user_id")
  @@map("ec_point")
}


// 팔로우 상태를 위한 enum 추가
enum FollowStatus {
  WAITING   @map("W") // 대기
  APPROVED  @map("Y") // 승인
  REJECTED  @map("N") // 거절
}

enum FcmPlatform {
  android
  ios
  web
}



enum ReportTargetType {
  BBS
  BBS_COMMENT
  
}

enum ReportReason {
  SPAM            // 스팸성 게시물/댓글
  ABUSE           // 욕설/모욕/폭력적 표현
  HARASSMENT      // 괴롭힘/따돌림
  COPYRIGHT       // 저작권 침해
  ILLEGAL_CONTENT // 불법 정보/거래
  OTHER           // 기타
}

/// - OPEN: 신고 초기
/// - REVIEWING: 검토
/// - RESOLVED: 조치 완료
/// - DISMISSED: 판정 기각
enum ReportStatus {
  OPEN
  REVIEWING
  RESOLVED
  DISMISSED
}


enum VerificationPurpose {
  SIGNUP
  LOGIN
  FIND_ACCOUNT
  PASSWORD_RESET
  WITHDRAW
  OTHER
}

enum UserRole {
  ADMIN
  EXTRA
  COMPANY
  USER
}
